<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marquage Formulaires - Traitement Asynchrone</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .btn {
            background: #007bff;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px 5px;
        }
        .btn:hover { background: #0056b3; }
        .btn:disabled { 
            background: #ccc; 
            cursor: not-allowed; 
        }
        .status-box {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            margin: 15px 0;
            min-height: 100px;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-fill {
            height: 100%;
            background: #28a745;
            transition: width 0.3s ease;
            text-align: center;
            line-height: 20px;
            color: white;
            font-size: 12px;
        }
        .status-started { border-left: 4px solid #007bff; }
        .status-processing { border-left: 4px solid #ffc107; }
        .status-completed { border-left: 4px solid #28a745; }
        .status-failed { border-left: 4px solid #dc3545; }
        .error-list {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            padding: 10px;
            margin-top: 10px;
            max-height: 200px;
            overflow-y: auto;
        }
        .success-info {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            border-radius: 4px;
            padding: 10px;
            margin-top: 10px;
        }
        .timestamp {
            color: #6c757d;
            font-size: 12px;
        }
        .current-form {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 4px;
            padding: 8px;
            margin: 5px 0;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîÑ Marquage des Formulaires de Maintenance</h1>
        <p>Cette page permet de marquer tous les formulaires de maintenance comme "non lus" en arri√®re-plan.</p>
        
        <div>
            <button id="startBtn" class="btn" onclick="startProcess()">
                üöÄ D√©marrer le processus
            </button>
            <button id="refreshBtn" class="btn" onclick="refreshStatus()" disabled>
                üîÑ Actualiser le statut
            </button>
            <button id="stopBtn" class="btn" onclick="stopChecking()" style="background: #dc3545;" disabled>
                ‚èπÔ∏è Arr√™ter le suivi
            </button>
        </div>
        
        <div id="statusContainer" class="status-box" style="display: none;">
            <h3>üìä Statut du processus</h3>
            <div id="statusContent"></div>
        </div>
    </div>

    <script>
        let currentProcessId = null;
        let statusInterval = null;
        let isProcessRunning = false;

        async function startProcess() {
            try {
                document.getElementById('startBtn').disabled = true;
                document.getElementById('startBtn').textContent = '‚è≥ D√©marrage...';
                
                const response = await fetch('/api/forms/markasunread');
                const data = await response.json();
                
                if (data.success) {
                    currentProcessId = data.process_id;
                    isProcessRunning = true;
                    
                    // Afficher la zone de statut
                    document.getElementById('statusContainer').style.display = 'block';
                    document.getElementById('refreshBtn').disabled = false;
                    document.getElementById('stopBtn').disabled = false;
                    
                    showStatus({
                        status: 'started',
                        message: data.message,
                        started_at: data.started_at,
                        process_id: data.process_id
                    });
                    
                    // Commencer √† v√©rifier le statut automatiquement
                    startStatusChecking();
                    
                } else {
                    alert('Erreur: ' + data.error);
                    resetButtons();
                }
                
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors du d√©marrage: ' + error.message);
                resetButtons();
            }
        }

        async function refreshStatus() {
            if (!currentProcessId) return;
            
            try {
                const response = await fetch(`/api/forms/markasunread/status/${currentProcessId}`);
                const data = await response.json();
                
                if (data.success) {
                    showStatus(data.data);
                    
                    // Si termin√©, arr√™ter la v√©rification automatique
                    if (data.data.status === 'completed' || data.data.status === 'failed') {
                        stopChecking();
                    }
                } else {
                    showError('Erreur lors de la r√©cup√©ration du statut: ' + data.error);
                }
                
            } catch (error) {
                console.error('Erreur:', error);
                showError('Erreur de communication: ' + error.message);
            }
        }

        function startStatusChecking() {
            // V√©rifier le statut toutes les 2 secondes
            statusInterval = setInterval(refreshStatus, 2000);
        }

        function stopChecking() {
            if (statusInterval) {
                clearInterval(statusInterval);
                statusInterval = null;
            }
            isProcessRunning = false;
            resetButtons();
        }

        function resetButtons() {
            document.getElementById('startBtn').disabled = false;
            document.getElementById('startBtn').textContent = 'üöÄ D√©marrer le processus';
            document.getElementById('refreshBtn').disabled = true;
            document.getElementById('stopBtn').disabled = true;
        }

        function showStatus(status) {
            const container = document.getElementById('statusContent');
            const statusClass = `status-${status.status}`;
            
            let html = `
                <div class="${statusClass}">
                    <h4>üìç Statut: ${getStatusText(status.status)}</h4>
                    <p><strong>ID du processus:</strong> ${currentProcessId}</p>
                    <p><strong>Message:</strong> ${status.message || 'En cours...'}</p>
                    <p class="timestamp"><strong>Derni√®re mise √† jour:</strong> ${status.last_updated || 'N/A'}</p>
            `;
            
            // Barre de progression
            if (status.progress !== undefined) {
                html += `
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${status.progress}%">
                            ${status.progress}%
                        </div>
                    </div>
                `;
            }
            
            // Informations de progression
            if (status.total > 0) {
                html += `
                    <p><strong>Progression:</strong> ${status.processed || 0} / ${status.total} formulaires</p>
                    <p><strong>Succ√®s:</strong> ${status.success_count || 0} | <strong>Erreurs:</strong> ${status.error_count || 0}</p>
                `;
            }
            
            // Formulaire en cours
            if (status.current_form) {
                html += `
                    <div class="current-form">
                        <strong>üìù En cours:</strong> ${status.current_form.name} 
                        (${status.current_form.index}/${status.total})
                    </div>
                `;
            }
            
            // R√©sum√© final
            if (status.final_summary) {
                html += `
                    <div class="success-info">
                        <h5>‚úÖ R√©sum√© final</h5>
                        <p><strong>Total trait√©:</strong> ${status.final_summary.total_processed}</p>
                        <p><strong>R√©ussis:</strong> ${status.final_summary.successful}</p>
                        <p><strong>√âchou√©s:</strong> ${status.final_summary.failed}</p>
                        <p><strong>Taux de r√©ussite:</strong> ${status.final_summary.success_rate}%</p>
                    </div>
                `;
            }
            
            // Erreurs
            if (status.errors && status.errors.length > 0) {
                html += `
                    <div class="error-list">
                        <h5>‚ùå Erreurs d√©tect√©es (${status.errors.length}):</h5>
                        <ul>
                `;
                status.errors.forEach(error => {
                    html += `<li><strong>Formulaire ${error.form_id}</strong> (${error.form_name}): ${error.error}</li>`;
                });
                html += `</ul></div>`;
            }
            
            html += '</div>';
            container.innerHTML = html;
        }

        function showError(message) {
            const container = document.getElementById('statusContent');
            container.innerHTML = `
                <div class="status-failed">
                    <h4>‚ùå Erreur</h4>
                    <p>${message}</p>
                </div>
            `;
        }

        function getStatusText(status) {
            const statusMap = {
                'started': 'üü° D√©marr√©',
                'fetching_forms': 'üîç R√©cup√©ration des formulaires',
                'processing': '‚öôÔ∏è En cours de traitement',
                'completed': '‚úÖ Termin√© avec succ√®s',
                'failed': '‚ùå √âchec'
            };
            return statusMap[status] || status;
        }

        // Nettoyer les intervalles quand on quitte la page
        window.addEventListener('beforeunload', function() {
            if (statusInterval) {
                clearInterval(statusInterval);
            }
        });
    </script>
</body>
</html>